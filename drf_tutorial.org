* Django REST Framework Tutorial
** View
   + takes a web request and returns a web response
*** ~ModelViewSet~
    + class-based view
    + register with a router
    + provides a set of default behaviours (CRUD)
    #+BEGIN_SRC python
      class UserViewSet(viewsets.ModelViewSet):
          """
          A viewset for viewing and editing user instances.
          """
          serializer_class = UserSerializer
          queryset = User.objects.all()
    #+END_SRC

** Router
   + determine how URLs be mapped to business logic
*** ~DefaultRouter~
    + ~register(prefix, viewset)~ 
    #+BEGIN_SRC python
      router = routers.DefaultRouter()
      router.register(r'users', UserViewSet)
      router.register(r'accounts', AccountViewSet)

      urlpatterns = [
          url(r'^forgot-password/$', ForgotPasswordFormView.as_view()),
      ]

      urlpatterns += router.urls
    #+END_SRC

** Serializer
   + convert queryset or model instance to native Python datatypes, serialize
   + convert Python datatypes to model instance or queryset, deserialize
*** ~ModelSerializer~
    + automatically generate a set of fields based on model
    + automatically generate validator
    + include simple default implementation
      #+BEGIN_SRC python
        class AccountSerializer(serializers.ModelSerializer):
            class Meta:
                model = Account
                fields = ('id', 'account_name', 'users', 'created')
      #+END_SRC

** Pagination
*** Set Pagination Style
    + global setting, most likely inside ~settings.py~
    #+BEGIN_SRC python
      REST_FRAMEWORK = {
          'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
          'PAGE_SIZE': 100
      }
    #+END_SRC
*** Modifying Pagination Style
    + overrides the global setting
    + set ~pagination_class~ inside ~ViewSet~
    #+BEGIN_SRC python
      class LargeResultsSetPagination(PageNumberPagination):
          page_size = 1000
          page_size_query_param = 'page_size'
          max_page_size = 10000

      class BillingRecordsView(generics.ModelViewSet):
          queryset = Billing.objects.all()
          serializer_class = BillingRecordsSerializer
          pagination_class = LargeResultsSetPagination
    #+END_SRC
*** Pagination Style Options
    + ~PageNumberPagination~
    + ~LimitOffsetPagination~
    + ~CursorPagination~

** Filter
   + restrict items returned from API
   + use together with ~ModelViewSet~
*** Set Filter Backend
    + Global setting
      #+BEGIN_SRC python
        REST_FRAMEWORK = {
            'DEFAULT_FILTER_BACKENDS': ('rest_framework.filters.DjangoFilterBackend',)
        }
      #+END_SRC
    + Local setting, per view
      #+BEGIN_SRC python
        class UserListView(generics.ListAPIView):
            queryset = User.objects.all()
            serializer_class = UserSerializer
            filter_backends = (filters.DjangoFilterBackend,)
      #+END_SRC
*** ~DjangoFilterBackend~
    + highly customizable
    + dependency: ~django-filter~
**** ~FilterSet~
     #+BEGIN_SRC python
       class ProductFilter(filters.FilterSet):
           min_price = django_filters.NumberFilter(name="price", lookup_expr='gte')
           max_price = django_filters.NumberFilter(name="price", lookup_expr='lte')
           class Meta:
               model = Product
               fields = ['category', 'in_stock', 'min_price', 'max_price']

       class ProductList(generics.ListAPIView):
           queryset = Product.objects.all()
           serializer_class = ProductSerializer
           filter_backends = (filters.DjangoFilterBackend,)
           filter_class = ProductFilter
     #+END_SRC
     + Sample Request, ~http://example.com/api/products?category=clothing&max_price=10.00~
**** Filter fields
     + automatically create a ~FilterSet~ for given fields
     + ~filter_fields~ on the viewset
       #+BEGIN_SRC python
         class ProductList(generics.ListAPIView):
             queryset = Product.objects.all()
             serializer_class = ProductSerializer
             filter_backends = (filters.DjangoFilterBackend,)
             filter_fields = ('category', 'in_stock')
       #+END_SRC
*** ~SearchFilter~
    + only be applied if view has a ~search_fields~
      #+BEGIN_SRC python
        class UserListView(generics.ListAPIView):
            queryset = User.objects.all()
            serializer_class = UserSerializer
            filter_backends = (filters.SearchFilter,)
            search_fields = ('username', 'email')
      #+END_SRC
    + search behaviour restricted by prepending various character
      + '^' starts-with search
      + '=' exact match
      + '@' full-text serach (only support MySQL)
      + '$' regex search
      #+BEGIN_SRC python
        search_fields = ('=username', '=email')
      #+END_SRC
    + Sample Request, ~http://example.com/api/users?search=russell~
*** ~OrderingFilter~
    + ~ordering_fields~, specify which fields should allowing in the ordering filter
      #+BEGIN_SRC python
        class UserListView(generics.ListAPIView):
            queryset = User.objects.all()
            serializer_class = UserSerializer
            filter_backends = (filters.OrderingFilter,)
            ordering_fields = ('username', 'email')
      #+END_SRC
    + ~ordering~ default ordering
      #+BEGIN_SRC python
        class UserListView(generics.ListAPIView):
            queryset = User.objects.all()
            serializer_class = UserSerializer
            filter_backends = (filters.OrderingFilter,)
            ordering_fields = ('username', 'email')
            ordering = ('username',)
      #+END_SRC
** Exception
   + Handled exceptions:
     + Subclasses of ~APIException~ raised inside REST framework
     + Django's ~Http404~
     + Django's ~PermissionDenied~
*** ~EXCEPTION_HANDLER~ setting
    + default setting
      #+BEGIN_SRC python
        REST_FRAMEWORK = {
            'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler'
        }
      #+END_SRC
*** API Reference
**** ~APIException~
     + *base class* for all exceptions
**** ~ParseError~
     + ~ParseError(detail=None)~
     + raised if the request contains malformed data
     + by default returns "400 Bad Request"
**** ~AuthenticationFailed~
     + ~AuthenticationFailed(detail=None)
     + raised when incoming requst contains incorrect authentication
     + depends on the authentication scheme, return "401" or "403"
**** ~NotAuthenticated~
     + ~NotAuthenticated(detail=None)~
     + raised when an unauthenticated request fails the permission checks
     + depends on the authentication scheme, return "401" or "403"
**** ~PermissionDenied~
     + ~PermissionDenied(detail=None)~
     + raise when an authenticated request fails the permission checks
     + return "403"
**** ~NotFound~
     + ~NotFound(detail=None)~
     + raise when a resource does not exist
     + return "404"
**** ~ValidationError~
     + ~ValidationError(detail)~
     + ~detail~ argument is mandatory
     + return "400"

** Reference
   1. http://www.django-rest-framework.org/
